<div data-article-id="<%= tutorial._id %>"> 
    <h1><%= tutorial.title %></h1> 
    <p>Vistas: <span id="article-views"><%= tutorial.views %></span></p> 

    <section class="step">
        <h2>üí° Introducci√≥n: Construyendo tu Laboratorio de Seguridad con Vagrant</h2>
        <p>En el √°mbito de la ciberseguridad, disponer de un entorno de laboratorio controlado es crucial para la pr√°ctica, experimentaci√≥n y prueba de herramientas sin comprometer sistemas de producci√≥n. Vagrant se posiciona como una herramienta excepcional para automatizar la creaci√≥n y gesti√≥n de entornos virtualizados de desarrollo y prueba.</p>
        <p>En esta gu√≠a exhaustiva, te mostraremos c√≥mo configurar un laboratorio de seguridad robusto y adaptable utilizando Vagrant y VirtualBox. Desplegaremos m√∫ltiples m√°quinas virtuales con roles y sistemas operativos diversos, incluyendo un Sistema de Detecci√≥n de Intrusos (IDS), un Sistema de Gesti√≥n de Informaci√≥n y Eventos de Seguridad (SIEM), un Endpoint de prueba, y, como novedad, m√°quinas con Ubuntu, Windows y un host Docker.</p>
        <h3>Requisitos Previos:</h3>
        <ul>
            <li>‚úÖ <a href="https://www.vagrantup.com/downloads" target="_blank">Vagrant</a> instalado.</li>
            <li>‚úÖ <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank">VirtualBox</a> instalado.</li>
            <li>‚úÖ Plugin <code>vagrant-disksize</code> para modificar el tama√±o del disco (opcional pero altamente recomendado):
                <pre><code>vagrant plugin install vagrant-disksize</code></pre>
            </li>
            <li>‚úÖ Conexi√≥n a internet para descargar las "boxes" de Vagrant.</li>
        </ul>
    </section>

    <section class="step">
        <h2>‚öôÔ∏è El Vagrantfile: Orquestando tu Laboratorio</h2>
        <p>El <code>Vagrantfile</code> es el cerebro de tu configuraci√≥n. Aqu√≠ se definen las m√°quinas virtuales, sus propiedades (nombre de host, IP, memoria, CPUs) y los scripts de aprovisionamiento que se ejecutar√°n al iniciar cada m√°quina. A continuaci√≥n, te presentamos un <code>Vagrantfile</code> ampliado para tu laboratorio de seguridad:</p>
        <pre><code>VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # Configuraci√≥n global para todas las VMs si no se sobrescribe
  config.vm.box_check_update = true # Verifica actualizaciones de boxes al iniciar

  # IDS (Sistema de Detecci√≥n de Intrusos) - Rocky Linux 9
  config.vm.define "ids" do |ids|
    ids.vm.box = "rockylinux/9" # Box base para IDS
    ids.vm.hostname = "ids"
    ids.vm.network "private_network", ip: "192.168.56.10"
    ids.vm.provision "shell", path: "scripts/setup_ids.sh" # Script de aprovisionamiento para IDS
    ids.disksize.size = '100GB' # Asigna un disco grande para logs de IDS
    ids.vm.provider "virtualbox" do |vb|
      vb.memory = 2048 # 2GB de RAM
      vb.cpus = 2 # 2 CPUs
      vb.name = "IDS_Lab" # Nombre de la VM en VirtualBox
    end
  end

  # SIEM (Sistema de Gesti√≥n de Informaci√≥n y Eventos de Seguridad) - Rocky Linux 9
  config.vm.define "siem" do |siem|
    siem.vm.box = "rockylinux/9" # Box base para SIEM
    siem.vm.hostname = "siem"
    siem.vm.network "private_network", ip: "192.168.56.20"
    siem.vm.provision "shell", path: "scripts/setup_siem.sh" # Script de aprovisionamiento para SIEM
    siem.disksize.size = '30GB' # Suficiente para el SIEM y sus datos
    siem.vm.provider "virtualbox" do |vb|
      vb.memory = 4096 # 4GB de RAM
      vb.cpus = 2 # 2 CPUs
      vb.name = "SIEM_Lab" # Nombre de la VM en VirtualBox
    end
  end

  # Endpoint (M√°quina de prueba/v√≠ctima) - Rocky Linux 9
  config.vm.define "endpoint" do |ep|
    ep.vm.box = "rockylinux/9" # Box base para el Endpoint
    ep.vm.hostname = "endpoint"
    ep.vm.network "private_network", ip: "192.168.56.30"
    ep.vm.provision "shell", path: "scripts/setup_endpoint.sh" # Script de aprovisionamiento para Endpoint
    ep.disksize.size = '20GB' # Suficiente para un sistema base
    ep.vm.provider "virtualbox" do |vb|
      vb.memory = 1024 # 1GB de RAM
      vb.cpus = 1 # 1 CPU
      vb.name = "Endpoint_Lab" # Nombre de la VM en VirtualBox
    end
  end

  # Ubuntu Server (Servidor adicional/Web/DB)
  config.vm.define "ubuntu" do |ubuntu|
    ubuntu.vm.box = "hashicorp/bionic64" # Box de Ubuntu Server 18.04 LTS (o "ubuntu/focal64" para 20.04)
    ubuntu.vm.hostname = "ubuntu"
    ubuntu.vm.network "private_network", ip: "192.168.56.40"
    ubuntu.vm.provision "shell", path: "scripts/setup_ubuntu.sh" # Script de aprovisionamiento para Ubuntu
    ubuntu.disksize.size = '40GB'
    ubuntu.vm.provider "virtualbox" do |vb|
      vb.memory = 2048
      vb.cpus = 2
      vb.name = "Ubuntu_Lab"
    end
  end

  # Windows 10 (Requiere box espec√≠fica y licencia/evaluaci√≥n)
  # NOTA: Las boxes de Windows suelen ser muy grandes y requieren m√°s recursos.
  # Aseg√∫rate de tener suficiente espacio en disco y RAM.
  # Puedes encontrar boxes de Windows en Vagrant Cloud o crearlas t√∫ mismo.
  # Ejemplo de box: "gusztavvargadr/windows-10" o "StefanScherer/windows_10"
  # La descarga puede tardar mucho.
  config.vm.define "windows" do |windows|
    windows.vm.box = "gusztavvargadr/windows-10" # O la box de Windows que prefieras (ej. "StefanScherer/windows_10")
    windows.vm.hostname = "windows"
    windows.vm.network "private_network", ip: "192.168.56.50"
    windows.vm.provision "shell", path: "scripts/setup_windows.ps1" # Script de aprovisionamiento para Windows (PowerShell)
    windows.disksize.size = '80GB' # Windows necesita un disco grande
    windows.vm.provider "virtualbox" do |vb|
      vb.memory = 4096 # Windows necesita al menos 4GB de RAM
      vb.cpus = 2
      vb.name = "Windows_Lab"
      # Opcional: Deshabilitar la interfaz gr√°fica si no la necesitas para ahorrar recursos
      # vb.gui = false
    end
  end

  # Docker Host (M√°quina para ejecutar contenedores) - Rocky Linux 9
  # Aqu√≠ puedes desplegar un host Docker y luego usar scripts para instalar Docker y Docker Compose
  config.vm.define "docker-host" do |docker_host|
    docker_host.vm.box = "rockylinux/9" # O "ubuntu/focal64" si prefieres Ubuntu para Docker
    docker_host.vm.hostname = "docker-host"
    docker_host.vm.network "private_network", ip: "192.168.56.60"
    docker_host.vm.provision "shell", path: "scripts/setup_docker.sh" # Script para instalar Docker
    docker_host.disksize.size = '50GB' # Suficiente para im√°genes y contenedores
    docker_host.vm.provider "virtualbox" do |vb|
      vb.memory = 2048
      vb.cpus = 2
      vb.name = "Docker_Host_Lab"
    end
  end

end
</code></pre>
    </section>

    <section class="step">
        <h2>üìÅ Estructura de Directorios para los Scripts</h2>
        <p>Para que el <code>Vagrantfile</code> pueda encontrar y ejecutar tus scripts de aprovisionamiento, es fundamental que organices tus archivos de la siguiente manera. Debes crear una carpeta llamada <code>scripts</code> en el mismo directorio donde resides tu <code>Vagrantfile</code>. Dentro de esta carpeta, guardar√°s todos los archivos <code>.sh</code> (para Linux) y <code>.ps1</code> (para Windows) que Vagrant ejecutar√° autom√°ticamente.</p>
        <pre><code>.
‚îú‚îÄ‚îÄ Vagrantfile
‚îî‚îÄ‚îÄ scripts/
    ‚îú‚îÄ‚îÄ setup_ids.sh
    ‚îú‚îÄ‚îÄ setup_siem.sh
    ‚îú‚îÄ‚îÄ setup_endpoint.sh
    ‚îú‚îÄ‚îÄ setup_ubuntu.sh
    ‚îú‚îÄ‚îÄ setup_windows.ps1 <span class="comment"># ¬°Importante: extensi√≥n .ps1 para PowerShell!</span>
    ‚îî‚îÄ‚îÄ setup_docker.sh
                </code></pre>
        <h3>Ejemplos de Scripts de Aprovisionamiento:</h3>
        <p><strong><code>scripts/setup_ids.sh</code> (para Rocky Linux):</strong></p>
        <pre><code>#!/bin/bash
<span class="comment"># Script de aprovisionamiento para la m√°quina IDS (Rocky Linux)</span>
echo "Actualizando sistema IDS y preparando para Suricata..."
sudo dnf update -y
sudo dnf install -y epel-release
sudo dnf install -y suricata # Ejemplo de instalaci√≥n de Suricata
sudo systemctl enable suricata
sudo systemctl start suricata
echo "IDS configurado y Suricata iniciado."
                </code></pre>
        <p><strong><code>scripts/setup_ubuntu.sh</code>:</strong></p>
        <pre><code>#!/bin/bash
<span class="comment"># Script de aprovisionamiento para la m√°quina Ubuntu Server</span>
echo "Actualizando sistema Ubuntu..."
sudo apt update -y
sudo apt upgrade -y
echo "Ubuntu configurado."
                </code></pre>
        <p><strong><code>scripts/setup_docker.sh</code>:</strong></p>
        <pre><code>#!/bin/bash
<span class="comment"># Script de aprovisionamiento para el host Docker (Rocky Linux)</span>
echo "Instalando Docker en el host..."
sudo dnf install -y dnf-plugins-core # Para Rocky Linux
sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
sudo dnf install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo systemctl start docker
sudo systemctl enable docker
sudo usermod -aG docker vagrant # A√±adir usuario vagrant al grupo docker para ejecutar docker sin sudo
echo "Docker instalado y configurado. Reinicia la sesi√≥n SSH para aplicar cambios de grupo."
                </code></pre>
        <p><strong>Para <code>scripts/setup_windows.ps1</code>:</strong></p>
        <p>Los scripts de aprovisionamiento para m√°quinas Windows se escriben en PowerShell y deben tener la extensi√≥n <code>.ps1</code>. Vagrant los detecta autom√°ticamente. La configuraci√≥n de Windows puede ser m√°s compleja y requerir la descarga de paquetes o la ejecuci√≥n de comandos de PowerShell para instalar software o ajustar configuraciones.</p>
        <pre><code><span class="comment"># scripts/setup_windows.ps1</span>
<span class="comment"># Ejemplo de script de aprovisionamiento para Windows (PowerShell)</span>
Write-Host "Iniciando aprovisionamiento de Windows..."

<span class="comment"># Ejemplo: Instalar Chocolatey (gestor de paquetes para Windows)</span>
Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

<span class="comment"># Ejemplo: Instalar Notepad++ con Chocolatey</span>
choco install notepadplusplus -y

Write-Host "Aprovisionamiento de Windows completado."
                </code></pre>
    </section>

    <section class="step">
        <h2>üöÄ Comandos Esenciales de Vagrant</h2>
        <p>Una vez que hayas configurado tu <code>Vagrantfile</code> y los scripts de aprovisionamiento, puedes gestionar tu laboratorio de seguridad utilizando estos comandos clave en la terminal, desde el directorio donde se encuentra tu <code>Vagrantfile</code>:</p>
        <table>
            <thead>
                <tr>
                    <th>Comando</th>
                    <th>Funci√≥n</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code>vagrant up</code></td>
                    <td>Inicia y aprovisiona todas las m√°quinas definidas en el <code>Vagrantfile</code>.</td>
                </tr>
                <tr>
                    <td><code>vagrant up [nombre_maquina]</code></td>
                    <td>Inicia y aprovisiona una m√°quina espec√≠fica (ej. <code>vagrant up siem</code>).</td>
                </tr>
                <tr>
                    <td><code>vagrant ssh [nombre_maquina]</code></td>
                    <td>Con√©ctate por SSH a una m√°quina espec√≠fica (ej. <code>vagrant ssh ids</code>).</td>
                </tr>
                <tr>
                    <td><code>vagrant halt</code></td>
                    <td>Apaga todas las m√°quinas virtuales de forma segura.</td>
                </tr>
                <tr>
                    <td><code>vagrant halt [nombre_maquina]</code></td>
                    <td>Apaga una m√°quina espec√≠fica.</td>
                </tr>
                <tr>
                    <td><code>vagrant suspend</code></td>
                    <td>Suspende el estado de todas las m√°quinas (guarda la RAM y el estado actual).</td>
                </tr>
                <tr>
                    <td><code>vagrant resume</code></td>
                    <td>Reanuda las m√°quinas suspendidas.</td>
                </tr>
                <tr>
                    <td><code>vagrant destroy</code></td>
                    <td>Elimina todas las m√°quinas virtuales y sus datos del disco.</td>
                </tr>
                <tr>
                    <td><code>vagrant destroy [nombre_maquina]</code></td>
                    <td>Elimina una m√°quina espec√≠fica.</td>
                </tr>
                <tr>
                    <td><code>vagrant status</code></td>
                    <td>Muestra el estado actual de todas las m√°quinas.</td>
                </tr>
                <tr>
                    <td><code>vagrant reload</code></td>
                    <td>Reinicia las m√°quinas virtuales, aplicando cambios en el <code>Vagrantfile</code> o scripts.</td>
                </tr>
            </tbody>
        </table>
    </section>

    <section class="summary">
        <h2>üéØ Conclusi√≥n Final: Tu Laboratorio de Seguridad a un Comando de Distancia</h2>
        <p>Con esta configuraci√≥n de Vagrant, ahora posees un laboratorio de ciberseguridad flexible, potente y completamente reproducible. La capacidad de definir m√∫ltiples sistemas operativos y roles te permite simular escenarios complejos y probar diversas herramientas de seguridad.</p>
        <p>Puedes adaptar y expandir los scripts de aprovisionamiento para instalar software espec√≠fico (como el ELK Stack, agentes EDR, herramientas forenses, etc.) en cada m√°quina, creando un entorno de pruebas a medida para tus necesidades de aprendizaje, investigaci√≥n o desarrollo. ¬°Experimenta, aprende y fortalece tus habilidades en ciberseguridad con tu nuevo laboratorio virtual!</p>
        <p>¬øTienes alguna pregunta sobre la configuraci√≥n, necesitas ayuda con un script de aprovisionamiento espec√≠fico, o quieres compartir tus propias ideas para el laboratorio? ¬°D√©jame un comentario!</p>
    </section>
    
    <!-- Secci√≥n de Comentarios -->
    <section id="comments-section">
        <h2>Comentarios</h2>
        <div class="comment-form-container step">
            <h3>Deja tu comentario</h3>
            <form id="comment-form">
                <div class="form-group">
                    <!-- Este div est√° vac√≠o en tu ejemplo, puedes quitarlo si no lo usas -->
                </div>
                <div class="form-group">
                    <label for="comment-text">Comentario:</label>
                    <textarea id="comment-text" rows="5" required></textarea>
                </div>
                <button type="submit" class="version-button">Enviar Comentario</button>
                <p id="comment-message" style="margin-top: 10px;"></p>
            </form>
        </div>

        <div id="comments-list-container" class="step">
            <h3>Comentarios (<span id="comments-count">0</span>)</h3>
            <div id="comments-list">
                <p>Cargando comentarios...</p>
            </div>
        </div>
    </section>
</div>
